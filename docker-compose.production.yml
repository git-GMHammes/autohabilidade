version: '3.8'

services:
  n8n:
    image: docker.io/n8nio/n8n:latest
    container_name: n8n_production
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      # Configurações básicas de produção
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      
      # PostgreSQL
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POSTGRESDB_SCHEMA=public
      
      # Redis para cache e filas
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD}
      - EXECUTIONS_MODE=queue
      
      # Configurações de timezone
      - GENERIC_TIMEZONE=America/Sao_Paulo
      - TZ=America/Sao_Paulo
      
      # Webhook e URL (ajustar para domínio real)
      - WEBHOOK_URL=https://seu-dominio.com/
      - N8N_PROTOCOL=https
      - N8N_HOST=seu-dominio.com
      - N8N_PORT=443
      
      # Segurança para produção
      - N8N_SECURE_COOKIE=true
      - NODE_ENV=production
      
      # Configurações de execução otimizadas
      - EXECUTIONS_PROCESS=main
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=168
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=first
      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=true
      
      # Workers para processar filas
      - N8N_WORKERS=2
      - QUEUE_HEALTH_CHECK_ACTIVE=true
      
      # Configurações de log
      - N8N_LOG_LEVEL=warn
      - N8N_LOG_OUTPUT=file
      - N8N_LOG_FILE_LOCATION=/var/log/n8n/
      
    volumes:
      - ./server_n8n/.n8n:/home/node/.n8n
      - ./server_n8n/shared:/home/node/shared
      - ./server_n8n/scripts:/home/node/scripts
      - ./server_n8n/logs:/var/log/n8n
      
    networks:
      - n8n_network
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
        
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  postgres:
    image: postgres:15-alpine
    container_name: n8n_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./server_n8n/postgres_data:/var/lib/postgresql/data
      - ./server_n8n/postgres_backup:/backup
    networks:
      - n8n_network
    ports:
      - "5432:5432"  # Remover em produção real
    command: >
      postgres -c max_connections=200
               -c shared_buffers=256MB
               -c effective_cache_size=1GB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  redis:
    image: redis:7-alpine
    container_name: n8n_redis
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - ./server_n8n/redis_data:/data
      - ./server_n8n/redis_backup:/backup
    networks:
      - n8n_network
    ports:
      - "6379:6379"  # Remover em produção real
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Nginx para SSL e proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: n8n_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./server_n8n/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./server_n8n/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - n8n_network
    depends_on:
      - n8n
    profiles:
      - ssl

  # Worker adicional para processar filas
  n8n-worker:
    image: docker.io/n8nio/n8n:latest
    container_name: n8n_worker
    restart: unless-stopped
    command: n8n worker
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD}
      - GENERIC_TIMEZONE=America/Sao_Paulo
      - TZ=America/Sao_Paulo
      - N8N_LOG_LEVEL=warn
    volumes:
      - ./server_n8n/.n8n:/home/node/.n8n
      - ./server_n8n/shared:/home/node/shared
      - ./server_n8n/scripts:/home/node/scripts
    networks:
      - n8n_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    profiles:
      - worker

networks:
  n8n_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local